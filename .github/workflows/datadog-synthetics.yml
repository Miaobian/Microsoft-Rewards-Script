name: Build and Push to Docker Hub

on:
  push:
    branches: [ "main" ] # 监控 main 分支
  workflow_dispatch: # 允许手动触发

env:
  # !!! 重要: 请将 'your-image-name' 修改为你的 Docker Hub 镜像名称 !!!
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/microsoft-rewards-script-chinese

jobs:
  build-and-push:
    name: Build and Push Multi-Arch Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 使用你创建的 secrets 登录 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 设置 QEMU 以支持多平台构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 设置 Docker Buildx 以使用高级构建功能
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 生成一个基于当前时间的唯一ID，用于标签
      - name: Generate image tag timestamp
        id: meta
        run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      # 构建并推送 amd64 镜像
      # 这个步骤会打上三个标签：
      # 1. 带时间戳的唯一标签 (e.g., ...:20231027123000-amd64)
      # 2. 架构特定的最新标签 (e.g., ...:latest-amd64)
      # 3. 通用的最新标签 (e.g., ...:latest)
      - name: Build and push Docker image (amd64)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.TIMESTAMP }}-amd64
            ${{ env.IMAGE_NAME }}:latest-amd64
            ${{ env.IMAGE_NAME }}:latest
          # 启用缓存以加快后续构建速度
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 构建并推送 arm64 镜像
      # 这个步骤只会打上两个标签，不会影响 'latest' 标签
      - name: Build and push Docker image (arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.TIMESTAMP }}-arm64
            ${{ env.IMAGE_NAME }}:latest-arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
